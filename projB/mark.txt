============================================
vis/result.rtx
01:01:00_Tuesday_01_May_2018
============================================
Feedback:
	Your program ("Nimsys.java") has been submitted successfully.
	Compiling your program with "javac"...
	Your program has been result.rtxd successfully :-)
Now, it's your responsibility to test your program for correctness!
Here is a simple test case, and the results:
============================================
Test for input file: in1
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$									$
$									$
$george,George,Washington,0 games,0 wins				$george,George,Washington,0 games,0 wins
jadams,John,Adams,0 games,0 wins					jadams,John,Adams,0 games,0 wins
jmadison,James,Madison,0 games,0 wins					jmadison,James,Madison,0 games,0 wins
jmonroe,James,Monroe,0 games,0 wins					jmonroe,James,Monroe,0 games,0 wins
tom,Thomas,Jefferson,0 games,0 wins					tom,Thomas,Jefferson,0 games,0 wins

$jmadison,James,Madison,0 games,0 wins					$jmadison,James,Madison,0 games,0 wins

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in2
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$The player already exists.						$The player already exists.

$									$
$gbush,George,Bush,0 games,0 wins					$gbush,George,Bush,0 games,0 wins
george,George,Washington,0 games,0 wins					george,George,Washington,0 games,0 wins

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in3
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$george,George,Washington,0 games,0 wins				$george,George,Washington,0 games,0 wins
jadams,John,Adams,0 games,0 wins					jadams,John,Adams,0 games,0 wins
tom,Thomas,Jefferson,0 games,0 wins					tom,Thomas,Jefferson,0 games,0 wins

$The player does not exist.						$The player does not exist.

$									$
$george,George,Washington,0 games,0 wins				$george,George,Washington,0 games,0 wins
jadams,John,Adams,0 games,0 wins					jadams,John,Adams,0 games,0 wins

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in4
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$jcarter,Jimmy,Carter,0 games,0 wins					$jcarter,Jimmy,Carter,0 games,0 wins

$The player does not exist.						$The player does not exist.

$									$
$jcarter,James,Carter,0 games,0 wins					$jcarter,James,Carter,0 games,0 wins

$									$
$									$
$									$
$george,George,Washington,0 games,0 wins				$george,George,Washington,0 games,0 wins
jadams,John,Adams,0 games,0 wins					jadams,John,Adams,0 games,0 wins

$									$
Initial stone count: 10							Initial stone count: 10
Maximum stone removal: 3						Maximum stone removal: 3
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

10 stones left: * * * * * * * * * *					10 stones left: * * * * * * * * * *
George's turn - remove how many?					George's turn - remove how many?

8 stones left: * * * * * * * *						8 stones left: * * * * * * * *
John's turn - remove how many?						John's turn - remove how many?

6 stones left: * * * * * *						6 stones left: * * * * * *
George's turn - remove how many?					George's turn - remove how many?

4 stones left: * * * *							4 stones left: * * * *
John's turn - remove how many?						John's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
George's turn - remove how many?					George's turn - remove how many?

2 stones left: * *							2 stones left: * *
John's turn - remove how many?						John's turn - remove how many?

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$100% | 01 games | John Adams						$100% | 01 games | John Adams
0%   | 01 games | George Washington					0%   | 01 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in5
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$One of the players does not exist.					$One of the players does not exist.

$									$
Initial stone count: 10							Initial stone count: 10
Maximum stone removal: 3						Maximum stone removal: 3
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

10 stones left: * * * * * * * * * *					10 stones left: * * * * * * * * * *
George's turn - remove how many?					George's turn - remove how many?

7 stones left: * * * * * * *						7 stones left: * * * * * * *
John's turn - remove how many?						John's turn - remove how many?
								     |	Invalid move. You must remove between 1 and 3 stones(do not need to 
Invalid move. You must remove between 1 and 3 stones.		     <

7 stones left: * * * * * * *						7 stones left: * * * * * * *
John's turn - remove how many?						John's turn - remove how many?

4 stones left: * * * *							4 stones left: * * * *
George's turn - remove how many?					George's turn - remove how many?

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?
								     |	Invalid move. You must remove between 1 and 3 stones(do not need to 
Invalid move. You must remove between 1 and 1 stones.		     <

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
George Washington wins!							George Washington wins!

$									$

Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: in6
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$									$
$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: John Adams							Player 1: John Adams
Player 2: Thomas Jefferson						Player 2: Thomas Jefferson

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
Thomas Jefferson wins!							Thomas Jefferson wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: Thomas Jefferson						Player 1: Thomas Jefferson
Player 2: James Madison							Player 2: James Madison

1 stones left: *							1 stones left: *
Thomas's turn - remove how many?					Thomas's turn - remove how many?

Game Over								Game Over
James Madison wins!							James Madison wins!

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams					     |	100% | 03 games | John Adams
50%  | 02 games | Thomas Jefferson				     |	100% | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$Are you sure you want to reset all player statistics? (y/n)	     |	$Are you sure you want to remove all players? (y/n)

$george,George,Washington,0 games,0 wins				$george,George,Washington,0 games,0 wins
jadams,John,Adams,0 games,0 wins					jadams,John,Adams,0 games,0 wins
jmadison,James,Madison,0 games,0 wins					jmadison,James,Madison,0 games,0 wins
tom,Thomas,Jefferson,0 games,0 wins					tom,Thomas,Jefferson,0 games,0 wins

$									$

Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: in7
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$									$
$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: John Adams							Player 1: John Adams
Player 2: Thomas Jefferson						Player 2: Thomas Jefferson

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
Thomas Jefferson wins!							Thomas Jefferson wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: Thomas Jefferson						Player 1: Thomas Jefferson
Player 2: James Madison							Player 2: James Madison

1 stones left: *							1 stones left: *
Thomas's turn - remove how many?					Thomas's turn - remove how many?

Game Over								Game Over
James Madison wins!							James Madison wins!

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams					     |	100% | 03 games | John Adams
50%  | 02 games | Thomas Jefferson				     |	100% | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$0%   | 02 games | George Washington					$0%   | 02 games | George Washington
50%  | 02 games | Thomas Jefferson				     |	100% | 03 games | John Adams
67%  | 03 games | John Adams					     <
100% | 01 games | James Madison						100% | 01 games | James Madison
								     >	100% | 02 games | Thomas Jefferson

$Are you sure you want to reset all player statistics? (y/n)	     |	$Are you sure you want to remove all players? (y/n)

$jadams,John,Adams,0 games,0 wins					$jadams,John,Adams,0 games,0 wins

$The player does not exist.						$The player does not exist.

$george,George,Washington,0 games,0 wins				$george,George,Washington,0 games,0 wins
jadams,John,Adams,0 games,0 wins					jadams,John,Adams,0 games,0 wins
jmadison,James,Madison,0 games,0 wins					jmadison,James,Madison,0 games,0 wins
tom,Thomas,Jefferson,0 games,0 wins					tom,Thomas,Jefferson,0 games,0 wins

$									$

Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: in8
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$The player already exists.						$The player already exists.

$The player does not exist.						$The player does not exist.

$									$
$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$The player does not exist.						$The player does not exist.

$									$
$									$
$									$
$									$
$									$
$The player does not exist.						$The player does not exist.

$									$
$Are you sure you want to reset all player statistics? (y/n)	     |	$Are you sure you want to remove all players? (y/n)

$The player does not exist.						$The player does not exist.

$									$
Initial stone count: 5							Initial stone count: 5
Maximum stone removal: 2						Maximum stone removal: 2
Player 1: Luke Skywalker						Player 1: Luke Skywalker
Player 2: Darth Vader							Player 2: Darth Vader

5 stones left: * * * * *						5 stones left: * * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

2 stones left: * *							2 stones left: * *
Luke's turn - remove how many?						Luke's turn - remove how many?

1 stones left: *							1 stones left: *
Darth's turn - remove how many?						Darth's turn - remove how many?

Game Over								Game Over
Luke Skywalker wins!							Luke Skywalker wins!

$									$
Initial stone count: 5							Initial stone count: 5
Maximum stone removal: 2						Maximum stone removal: 2
Player 1: Luke Skywalker						Player 1: Luke Skywalker
Player 2: Darth Vader							Player 2: Darth Vader

5 stones left: * * * * *						5 stones left: * * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

2 stones left: * *							2 stones left: * *
Luke's turn - remove how many?						Luke's turn - remove how many?

1 stones left: *							1 stones left: *
Darth's turn - remove how many?						Darth's turn - remove how many?

Game Over								Game Over
Luke Skywalker wins!							Luke Skywalker wins!

$									$
Initial stone count: 5							Initial stone count: 5
Maximum stone removal: 2						Maximum stone removal: 2
Player 1: Luke Skywalker						Player 1: Luke Skywalker
Player 2: Darth Vader							Player 2: Darth Vader

5 stones left: * * * * *						5 stones left: * * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

2 stones left: * *							2 stones left: * *
Luke's turn - remove how many?						Luke's turn - remove how many?

1 stones left: *							1 stones left: *
Darth's turn - remove how many?						Darth's turn - remove how many?

Game Over								Game Over
Luke Skywalker wins!							Luke Skywalker wins!

$									$
Initial stone count: 8							Initial stone count: 8
Maximum stone removal: 5						Maximum stone removal: 5
Player 1: Han Solo							Player 1: Han Solo
Player 2: Darth Vader							Player 2: Darth Vader

8 stones left: * * * * * * * *						8 stones left: * * * * * * * *
Han's turn - remove how many?						Han's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

Game Over								Game Over
Han Solo wins!								Han Solo wins!

$									$
Initial stone count: 8							Initial stone count: 8
Maximum stone removal: 5						Maximum stone removal: 5
Player 1: Han Solo							Player 1: Han Solo
Player 2: Darth Vader							Player 2: Darth Vader

8 stones left: * * * * * * * *						8 stones left: * * * * * * * *
Han's turn - remove how many?						Han's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

Game Over								Game Over
Han Solo wins!								Han Solo wins!

$									$
Initial stone count: 8							Initial stone count: 8
Maximum stone removal: 5						Maximum stone removal: 5
Player 1: Han Solo							Player 1: Han Solo
Player 2: Darth Vader							Player 2: Darth Vader

8 stones left: * * * * * * * *						8 stones left: * * * * * * * *
Han's turn - remove how many?						Han's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

Game Over								Game Over
Han Solo wins!								Han Solo wins!

$									$
Initial stone count: 10							Initial stone count: 10
Maximum stone removal: 6						Maximum stone removal: 6
Player 1: Darth Vader							Player 1: Darth Vader
Player 2: Han Solo							Player 2: Han Solo

10 stones left: * * * * * * * * * *					10 stones left: * * * * * * * * * *
Darth's turn - remove how many?						Darth's turn - remove how many?

4 stones left: * * * *							4 stones left: * * * *
Han's turn - remove how many?						Han's turn - remove how many?

Game Over								Game Over
Darth Vader wins!							Darth Vader wins!

$lskywalker,Luke,Skywalker,3 games,3 wins				$lskywalker,Luke,Skywalker,3 games,3 wins

$dvader,Darth,Vader,7 games,1 wins					$dvader,Darth,Vader,7 games,1 wins
hsolo,Han,Solo,4 games,3 wins						hsolo,Han,Solo,4 games,3 wins
lskywalker,Luke,Skywalker,3 games,3 wins				lskywalker,Luke,Skywalker,3 games,3 wins

$100% | 03 games | Luke Skywalker					$100% | 03 games | Luke Skywalker
75%  | 04 games | Han Solo					     |	100% | 04 games | Han Solo
14%  | 07 games | Darth Vader					     |	0%   | 07 games | Darth Vader

$100% | 03 games | Luke Skywalker					$100% | 03 games | Luke Skywalker
75%  | 04 games | Han Solo					     |	100% | 04 games | Han Solo
14%  | 07 games | Darth Vader					     |	0%   | 07 games | Darth Vader

$14%  | 07 games | Darth Vader					     |	$0%   | 07 games | Darth Vader
75%  | 04 games | Han Solo					     |	100% | 04 games | Han Solo
100% | 03 games | Luke Skywalker					100% | 03 games | Luke Skywalker

$One of the players does not exist.					$One of the players does not exist.

$									$
Initial stone count: 10							Initial stone count: 10
Maximum stone removal: 3						Maximum stone removal: 3
Player 1: Luke Skywalker						Player 1: Luke Skywalker
Player 2: Han Solo							Player 2: Han Solo

10 stones left: * * * * * * * * * *					10 stones left: * * * * * * * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

7 stones left: * * * * * * *						7 stones left: * * * * * * *
Han's turn - remove how many?						Han's turn - remove how many?
								     |	Invalid move. You must remove between 1 and 3 stones(do not need to 
Invalid move. You must remove between 1 and 3 stones.		     <

7 stones left: * * * * * * *						7 stones left: * * * * * * *
Han's turn - remove how many?						Han's turn - remove how many?

4 stones left: * * * *							4 stones left: * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

1 stones left: *							1 stones left: *
Han's turn - remove how many?						Han's turn - remove how many?
								     |	Invalid move. You must remove between 1 and 3 stones(do not need to 
Invalid move. You must remove between 1 and 1 stones.		     <

1 stones left: *							1 stones left: *
Han's turn - remove how many?						Han's turn - remove how many?

Game Over								Game Over
Luke Skywalker wins!							Luke Skywalker wins!

$100% | 04 games | Luke Skywalker					$100% | 04 games | Luke Skywalker
60%  | 05 games | Han Solo					     |	100% | 05 games | Han Solo
14%  | 07 games | Darth Vader					     |	0%   | 07 games | Darth Vader

$									$

Oops, your results seem to be INCORRECT :-(
============================================
src/NimPlayer.java
22:30:21_Sunday_29_April_2018
============================================

/*
COMP90041 Programming and Software Development
Project B: Nimsys Game
Student Name: Qianyu Guo
Student Number:921808
29 April 2018
*/

import java.util.Scanner;

public class NimPlayer {

	private String userName;
	private String familyName;
	private String givenName;
	public int winTimes = 0;
	public int playTimes = 0;
	public int rank = 0;
	public float ranking = 0;
	public int index = 0;
	

	public NimPlayer(String userName, String familyName, String givenName) {
		setUserName(userName);
		setFamilyName(familyName);
		setGivenName(givenName);
	}
	
	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getFamilyName() {
		return familyName;
	}

	public void setFamilyName(String familyName) {
		this.familyName = familyName;
	}

	public String getGivenName() {
		return givenName;
	}

	public void setGivenName(String givenName) {
		this.givenName = givenName;
	}

	

	//reset the game
	public void reset() {
		winTimes = 0;
		playTimes = 0;
		rank = 0;
	}
	
	//display info about players
	public void display() {
		System.out.println(
				userName + "," + givenName + "," + familyName + "," + playTimes + " games," + winTimes + " wins");
	}

	//show rank of players
	public void rankings() {
		String ranking = String.valueOf(rank) + "%";
		System.out.printf("%-5s| %02d games | %s %s\n", ranking, playTimes, givenName, familyName);
	}

	// Remove stones during the game
	public int removeStone(Scanner scanner) {
		int stoneNumber = scanner.nextInt();
		scanner.nextLine();
		return stoneNumber;
	}
}
============================================
src/NimGame.java
22:30:20_Sunday_29_April_2018
============================================

/*
COMP90041 Programming and Software Development
Project B: Nimsys Game
Student Name: Qianyu Guo
Student Number:921808
29 April 2018
*/
import java.util.Scanner;

public class NimGame {

	private int initialNumber;
	private int upperBound;

	public Scanner scanner;
	public NimPlayer player1;
	public NimPlayer player2;
	public NimPlayer currentPlayer;
	public NimPlayer winner;

	public NimGame(int initialNumber, int upperBound, NimPlayer player1, NimPlayer player2, Scanner scanner) {
		setInitialNumber(initialNumber);
		setUpperBound(upperBound);
		this.player1 = player1;
		this.player2 = player2;
		this.scanner = scanner;
	}

	public int getInitialNumber() {
		return initialNumber;
	}

	public void setInitialNumber(int initialNumber) {
		this.initialNumber = initialNumber;
	}

	public int getUpperBound() {
		return upperBound;
	}

	public void setUpperBound(int upperBound) {
		this.upperBound = upperBound;
	}

	//Show game info,and start game
	public NimPlayer start() {
		System.out.println("\nInitial stone count: " + initialNumber);
		System.out.println("Maximum stone removal: " + upperBound);
		System.out.println("Player 1: " + player1.getGivenName() + " " + player1.getFamilyName());
		System.out.println("Player 2: " + player2.getGivenName() + " " + player2.getFamilyName());
		while (initialNumber > 0) {
			turn(player1);
			turn(player2);
		}
		gameOver();
		return winner;
	}

	// Turns between two players
	
	public void turn(NimPlayer player) {
		boolean removeStoneOutsideRange = true;
		int stoneToMove = 0;
		if (initialNumber > 0) {
			currentPlayer = player;
			while (removeStoneOutsideRange) {
				displayStones();
				System.out.println(currentPlayer.getGivenName() + "'s turn - remove how many?");
				stoneToMove = currentPlayer.removeStone(scanner);
				if (stoneToMove >= 1 && stoneToMove <= upperBound)
					removeStoneOutsideRange = false;
				else
					System.out.println("Invalid move. You must remove between 1 and " + upperBound
							+ " stones(do not need to consider the singular or plural form of \"stone\").");
			}
			initialNumber = initialNumber - stoneToMove;
		}
		//When no stones left, then the method judgeWinner() returns the winner
		if (initialNumber <= 0) {
			winner = judgeWinner();
		}
	}
	// If current player is player1,then player2 wins, and vice versa.
	public NimPlayer judgeWinner() {
		if (currentPlayer == player1)
			return player2;
		else
			return player1;
	}

	// Display the number of stones in "*"
	public void displayStones() {
		System.out.println();
		if (initialNumber > 0) {
			System.out.print(initialNumber + " stones left:");
			for (int i = 0; i < initialNumber; i++) {
				System.out.print(" *");
			}
			System.out.println();
		}
	}

	//Show game is over and who won the game.
	public void gameOver() {
		System.out.println("\nGame Over");
		System.out.println(winner.getGivenName() + " " + winner.getFamilyName() + " wins!");
	}
}
============================================
src/Nimsys.java
22:30:21_Sunday_29_April_2018
============================================

/*
COMP90041 Programming and Software Development
Project B: Nimsys Game
Student Name: Qianyu Guo
Student Number:921808
29 April 2018
*/

import java.util.Arrays;
import java.util.Scanner;
import java.util.Comparator;

public class Nimsys {
	private NimPlayer[] players = new NimPlayer[100];
	public boolean isInNimsys = true;
	public int pos = 0;
	public NimPlayer playerUpdate;
	Scanner scanner = new Scanner(System.in);
	
	public static void main(String[] args) {
		System.out.println("Welcome to Nim");
		Nimsys newNim = new Nimsys();
		newNim.command();
	}
	
	//different commands correspond to different methods 
	public void command() {
		while (isInNimsys) {
			System.out.print("\n$");
			String[] userInput = scanner.nextLine().split(" ");
			switch (userInput[0]) {
			case "addplayer":
				String[] addPlayers = userInput[1].split(",");
				addPlayer(addPlayers[0], addPlayers[1], addPlayers[2]);
				break;
			case "removeplayer":
				if (userInput.length == 1) {
					removeAllPlayers();
				} else {
					removePlayer(userInput[1]);
				}
				break;
			case "editplayer":
				String[] editPlayers = userInput[1].split(",");
				editPlayer(editPlayers[0], editPlayers[1], editPlayers[2]);
				break;
			case "resetstats":
				if (userInput.length == 1) {
					resetAllPlayers();
				} else {
					resetPlayer(userInput[1]);
				}
				break;
			case "displayplayer":
				if (userInput.length == 1) {
					displayAllPlayers();
				} else {
					displayPlayer(userInput[1]);
				}
				break;
			case "rankings":
				if (userInput.length == 1) {
					rankByDesc();
				} else {
					if (userInput[1].equals("desc")) {
						rankByDesc();
					}
					if (userInput[1].equals("asc")) {
						rankByAsc();
					}
				}
				break;
			case "startgame":
				String[] startGame = userInput[1].split(",");
				startGame(Integer.valueOf(startGame[0]), Integer.valueOf(startGame[1]), startGame[2], startGame[3]);
				break;
			case "exit":
				isInNimsys = false;
				break;
			default:
				break;
			}
		}
		System.out.println();
		System.exit(0);
	}

	// find certain player in the array according to username
	public int findPlayer(String userName, int mode) {
		for (int i = 0; i < players.length; i++) {
			if (players[i] != null) {
				if (players[i].getUserName().equals(userName)) {
					return i;
				}
			}
		}
		if (mode == 0) {
		}
		if (mode == 1) {
			System.out.println("The player does not exist.");
		}
		return -1;
	}

	// add player
	public void addPlayer(String userName, String familyName, String givenName) {
		if (findPlayer(userName, 0) >= 0) {
			System.out.println("The player already exists.");
		} else {
			NimPlayer playerToAdd = new NimPlayer(userName, familyName, givenName);
			playerToAdd.index = pos;
			players[pos] = playerToAdd;
			if (pos < players.length)
				pos++;
			else
				return;
		}
	}

	// remove all the players
	public void removeAllPlayers() {
		System.out.println("Are you sure you want to remove all players? (y/n)");
		if (scanner.next().equals("y")) {
			for (int i = 0; i < players.length; i++) {
				players[i] = null;
			}
		}
		pos = 0;
		scanner.nextLine();
	}

	// remove certain player
	public void removePlayer(String userName) {
		int index = findPlayer(userName, 1);
		if (index >= 0) {
			players[index] = null;
			while (players[index + 1] != null) {
				players[index] = players[index + 1];
				players[index].index--;
				index++;
			}
			players[index] = null;
			pos--;
		}
	}

	// edit player's name
	public void editPlayer(String userName, String newFamilyName, String newGivenName) {
		int index = findPlayer(userName, 1);
		if (index >= 0) {
			players[index].setFamilyName(newFamilyName);
			players[index].setGivenName(newGivenName);
		}
	}

	// reset all the players
	public void resetAllPlayers() {
		System.out.println("Are you sure you want to remove all players? (y/n)");
		if (scanner.next().equals("y")) {
			for (int i = 0; i < players.length; i++) {
				if (players[i] != null) {
					players[i].reset();
				}
			}
		}
		scanner.nextLine();
	}

	// reset certain player
	public void resetPlayer(String userName) {
		int index = findPlayer(userName, 1);
		if (index >= 0) {
			players[index].reset();
		}
	}

	// display info of all the players
	public void displayAllPlayers() {
		NimPlayer[] displayArray = moveToNewArray(players);
		Arrays.sort(displayArray, comparatorUserName);
		for (int i = 0; i < displayArray.length; i++) {
			if (displayArray[i] != null) {
				displayArray[i].display();
			}
		}
	}

	// display info of certain player
	public void displayPlayer(String userName) {
		int index = findPlayer(userName, 1);
		if (index >= 0) {
			players[index].display();
		}

	}

	// rank players by descend order
	public void rankByDesc() {
		NimPlayer[] rankingArray = moveToNewArray(players);
		Arrays.sort(rankingArray, comparatorDesc);
		if (rankingArray.length > 10) {
			for (int i = 0; i < 10; i++) {
				rankingArray[i].rankings();
			}
		} else {
			for (int i = 0; i < rankingArray.length; i++) {
				rankingArray[i].rankings();
			}
		}
	}

	// rank players by ascend order
	public void rankByAsc() {
		NimPlayer[] rankingArray = moveToNewArray(players);
		Arrays.sort(rankingArray, comparatorAsc);
		if (rankingArray.length > 10) {
			for (int i = 0; i < 10; i++) {
				rankingArray[i].rankings();
			}
		} else {
			for (int i = 0; i < rankingArray.length; i++) {
				rankingArray[i].rankings();
			}
		}
	}

	// sort rank by descend order
	Comparator<NimPlayer> comparatorDesc = new Comparator<NimPlayer>() {
		@Override
		public int compare(NimPlayer o1, NimPlayer o2) {
			float res = o2.ranking - o1.ranking;
			int resLast = 0;
			if (res == 0) {
				resLast = o1.getUserName().compareTo(o2.getUserName());
			}
			if (res < 0)
				resLast = -1;
			if (res > 0)
				resLast = 1;
			return resLast;
		}
	};
	
	// sort rank by ascend order
	Comparator<NimPlayer> comparatorAsc = new Comparator<NimPlayer>() {
		@Override
		public int compare(NimPlayer o1, NimPlayer o2) {
			float res = o1.rank - o2.rank;
			int resLast = 0;
			if (res == 0) {
				res = o1.getUserName().compareTo(o2.getUserName());
			}
			if (res < 0)
				resLast = -1;
			if (res > 0)
				resLast = 1;
			return resLast;
		}
	};
	
	// sort username by Alphabetical order
	Comparator<NimPlayer> comparatorUserName = new Comparator<NimPlayer>() {
		@Override
		public int compare(NimPlayer o1, NimPlayer o2) {
			return o1.getUserName().compareTo(o2.getUserName());
		}
	};

	// move sorting result to a new array
	public NimPlayer[] moveToNewArray(NimPlayer[] oldArray) {
		NimPlayer[] newArray = new NimPlayer[pos];
		for (int j = 0; j < newArray.length; j++) {
			newArray[j] = oldArray[j];
		}
		return newArray;
	}

	// check if two players are in the array,
	// and record play times,win times and ranking
	public void startGame(int initialStones, int upperBound, String userName1, String userName2) {
		int index1 = findPlayer(userName1, 0);
		int index2 = findPlayer(userName2, 0);
		if (index1 >= 0 && index2 >= 0) {
			players[index1].playTimes++;
			players[index2].playTimes++;
			NimGame newVersus = new NimGame(initialStones, upperBound, players[index1], players[index2], scanner);
			NimPlayer winner = newVersus.start();
			players[winner.index].winTimes++;
			players[index1].ranking = (float) players[index1].winTimes / (float) players[index1].playTimes;
			players[index2].ranking = (float) players[index2].winTimes / (float) players[index2].playTimes;
			players[index1].rank = 100 * Math.round(players[index1].ranking);
			players[index2].rank = 100 * Math.round(players[index2].ranking);
		} else {
			System.out.println("One of the players does not exist.");
		}
	}

}